package de.uniba.rz.app;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.logging.Logger;



import de.uniba.rz.entities.EnumMessageType;
import de.uniba.rz.entities.MessageType;
import de.uniba.rz.entities.Priority;
import de.uniba.rz.entities.Ticket;
import de.uniba.rz.entities.TicketException;
import de.uniba.rz.entities.Type;
import de.uniba.rz.entities.Status;
import de.uniba.rz.io.rpc.ProtoMessageBody;
import de.uniba.rz.io.rpc.ProtoMessageDTO;
import de.uniba.rz.io.rpc.ProtoMessageType;
import de.uniba.rz.io.rpc.TicketList;
import de.uniba.rz.io.rpc.TicketRequest;
import de.uniba.rz.io.rpc.TicketResponse;
import de.uniba.rz.io.rpc.TicketServiceGrpc;
import de.uniba.rz.io.rpc.msgToken;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.StatusRuntimeException;

public class TicketManagmentBackendGrpc implements TicketManagementBackend {

	private ManagedChannel channel;

	private TicketServiceGrpc.TicketServiceBlockingStub syncStub;

	private AtomicInteger nextId;
	
	private Map<Integer, Ticket> tickets = new HashMap<>();
	
	public static Logger logger = Logger.getLogger(TicketManagmentBackendGrpc.class.getName());

	public TicketManagmentBackendGrpc() {

	}

	public TicketManagmentBackendGrpc(String host, int port) {

		this(ManagedChannelBuilder.forAddress(host, port).usePlaintext());
		nextId = new AtomicInteger(1);

	}

	public TicketManagmentBackendGrpc(ManagedChannelBuilder<?> channelBuilder) {

		// there are different options possible
		this.channel = channelBuilder.build();

		// stubs are generated by the "protoc" tool (in our case during the gradle
		// build)
		this.syncStub = TicketServiceGrpc.newBlockingStub(this.channel);

	}

	@Override
	public void triggerShutdown() {
		// TODO Auto-generated method stub

		if (!channel.isShutdown()) {
			System.out.println("Trying to shut down the client . . .");
			while (true) {
				try {
					channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);
					System.out.println("Client successfully shutdown!");
				} catch (InterruptedException e) {
					// no handling of the InterruptedException needed
				}
				break;
			}
		}

	}

	@Override
	public Ticket createNewTicket(String reporter, String topic, String description, Type type, Priority priority)
			throws TicketException {
		// TODO Auto-generated method stub
		logger.info("End"); 
		Ticket ticket = new Ticket(nextId.getAndIncrement(), reporter, topic, description, type, priority);
       try {
		
		TicketRequest request = TicketRequest.newBuilder()
				.setId(ticket.getId())
				.setReporter(ticket.getReporter())
				.setTopic(ticket.getTopic())
				.setDescription(ticket.getDescription())
				.setTypeValue(ticket.getType().ordinal())
				.setPriorityValue(ticket.getPriority().ordinal())
				.setStatusValue(ticket.getStatus().ordinal()).build();
	
		//logger.info("msg"+ request.getId()+"\t"+request.getReporter()+"\t"+request.getTopic()+"\t"+request.getType()+"\t"+request.getPriority());
		
//		TicketResponse response=this.syncStub.createNewTicket(request);
		logger.info("Strat.......");
//		logger.info("msg"+ response);
		logger.info("Strat.......");
		sendPacketToServer(ProtoMessageType.SAVE_VALUE, request, 0, ticket);
		logger.info("End");
       }
		catch (StatusRuntimeException e) {
            System.err.println("The server is unresponsive.");
            this.triggerShutdown();
        }
		return ticket;

	}
	
	private List<Ticket> sendPacketToServer(int messageType, TicketRequest request, int optionalTicketId, Ticket ticket) {
		
		ProtoMessageDTO.Builder messageDto = ProtoMessageDTO.newBuilder();
		ProtoMessageBody.Builder messageBody = ProtoMessageBody.newBuilder(); 
		
		messageDto.setMessageType(ProtoMessageType.forNumber(messageType)); 
		
		if(messageType == ProtoMessageType.SAVE_VALUE)
		{
			messageBody.setTicket(request).build();
			this.tickets.put(ticket.getId(), ticket);
		}
		else if(messageType == ProtoMessageType.RETRIEVE_ONE_VALUE) {
			messageDto.setOptionalTicketId(optionalTicketId);
		}
		else if(messageType == ProtoMessageType.UPDATE_VALUE) {
			messageDto.setOptionalTicketId(optionalTicketId);
			messageBody.setTicket(request).build();
			this.tickets.put(ticket.getId(), ticket);
		}
		messageDto.setMessageBody(messageBody);
		
		ProtoMessageDTO protoMessageDTO = this.syncStub.createTicketService(messageDto.build());
		
		List<Ticket> ticketsFromServer = new ArrayList<>(); 
		List<TicketRequest> listOfTicketRequest = protoMessageDTO.getMessageBody().getTicketList().getTicketsList(); 
		for(TicketRequest ticketReq : listOfTicketRequest) {
			Ticket newTicket = new Ticket(ticketReq.getId(), ticketReq.getReporter(), ticketReq.getTopic(), ticketReq.getDescription(), 
					de.uniba.rz.entities.Type.valueOf(ticketReq.getType().toString()), de.uniba.rz.entities.Priority.valueOf(ticketReq.getPriority().toString()));
			newTicket.setStatus(de.uniba.rz.entities.Status.valueOf(ticketReq.getStatus().toString()));
			ticketsFromServer.add(newTicket);
		}
		
//		System.out.println("xxxxxxxxx: "+ticketsFromServer.get(0));
		
		
		return ticketsFromServer;
	}

	@Override
	public List<Ticket> getAllTickets() throws TicketException {
		// TODO Auto-generated method stub


		List<Ticket> ticketList;
		
		ticketList = sendPacketToServer(ProtoMessageType.RETRIEVE_ALL_VALUE, null, 0, null);
		
		if(ticketList == null) {
			ticketList = new ArrayList<>();
		}
		else {
			ticketList.forEach(ticket -> this.tickets.put(ticket.getId(), ticket));
		}
		
		
		
		
//		msgToken token = msgToken.newBuilder().setToken("all").build();
//        
//		TicketList response =this.syncStub.getAllTickets(token);
//		logger.info("msg\t");
		
		
		
		
//		for(TicketRequest one: response.getTicketsList()) {
//			Ticket responseTicket = new Ticket();     
//			responseTicket.setId(nextId.getAndIncrement());
//			responseTicket.setReporter(one.getReporter());
//			responseTicket.setTopic(one.getTopic());
//			responseTicket.setDescription(one.getDescription());
//			responseTicket.setType(Type.values()[one.getTypeValue()]);
//			responseTicket.setPriority(Priority.values()[one.getPriorityValue()]);
//			responseTicket.setStatus(Status.values()[one.getStatusValue()]);
//			tickets.add(responseTicket);
//			
//		}
//		tickets.addAll(response.getTicketsList())
//         
		//System.out.println(tickets.toString());
//		try {
//			while (response.hasNext()) {
//				TicketResponse currentTicketResponse = response.next();
//				Ticket responseTicket = new Ticket();
//				responseTicket.setId(nextId.getAndIncrement());
//				responseTicket.setReporter(currentTicketResponse.getCreatedreporter());
//				responseTicket.setTopic(currentTicketResponse.getCreatedtopic());
//				responseTicket.setDescription(currentTicketResponse.getCreateddescription());
//				responseTicket.setType(Type.values()[currentTicketResponse.getCreatedtypeValue()]);
//				responseTicket.setPriority(Priority.values()[currentTicketResponse.getCreatedpriorityValue()]);
//				tickets.add(responseTicket);
//			logger.info("get all tickets" + tickets.toString());				
//			}
//		} catch (Exception e) {
////			// TODO: handle exception
//			System.out.println(e.getMessage());
//		}


		return ticketList;
	}

	@Override
	public Ticket getTicketById(int id) throws TicketException {
		// TODO Auto-generated method stub
		
		List<Ticket> receivedTicket = sendPacketToServer(MessageType.RETRIEVE_ONE, null, id, null);
		if(!receivedTicket.isEmpty()) {
			System.out.println(receivedTicket.get(0));
			this.tickets.put(receivedTicket.get(0).getId(), receivedTicket.get(0));
		}
		return receivedTicket.get(0);
	}

	@Override
	public Ticket acceptTicket(int id) throws TicketException {
		// TODO Auto-generated method stub
		Ticket ticket = this.tickets.get(id);
		if(ticket.getStatus() != Status.NEW) {
			throw new TicketException("Can no accept ticket as it is in status: "+ticket.getStatus());
		}
		ticket.setStatus(Status.ACCEPTED);
		this.tickets.put(ticket.getId(), ticket);//public void sendUDPPacketToServer(int messageType, Ticket ticket, int optionalTicketId)
		
		TicketRequest request = TicketRequest.newBuilder()
				.setId(ticket.getId())
				.setReporter(ticket.getReporter())
				.setTopic(ticket.getTopic())
				.setDescription(ticket.getDescription())
				.setTypeValue(ticket.getType().ordinal())
				.setPriorityValue(ticket.getPriority().ordinal())
				.setStatusValue(ticket.getStatus().ordinal()).build();
		
		List<Ticket> ticketsFromServer = sendPacketToServer(MessageType.UPDATE, request, ticket.getId(), ticket);
		
		return (Ticket) ticket.clone();
	}

	@Override
	public Ticket rejectTicket(int id) throws TicketException {
		// TODO Auto-generated method stub
		Ticket ticket = this.tickets.get(id);
		if(ticket.getStatus() != Status.NEW) {
			throw new TicketException("Can no accept ticket as it is in status: "+ticket.getStatus());
		}
		ticket.setStatus(Status.REJECTED);
		this.tickets.put(ticket.getId(), ticket);//public void sendUDPPacketToServer(int messageType, Ticket ticket, int optionalTicketId)
		
		TicketRequest request = TicketRequest.newBuilder()
				.setId(ticket.getId())
				.setReporter(ticket.getReporter())
				.setTopic(ticket.getTopic())
				.setDescription(ticket.getDescription())
				.setTypeValue(ticket.getType().ordinal())
				.setPriorityValue(ticket.getPriority().ordinal())
				.setStatusValue(ticket.getStatus().ordinal()).build();
		
		sendPacketToServer(MessageType.UPDATE, request, ticket.getId(), ticket);
		
		return (Ticket) ticket.clone();
	}

	@Override
	public Ticket closeTicket(int id) throws TicketException {
		// TODO Auto-generated method stub
		Ticket ticket = this.tickets.get(id);
		if(ticket.getStatus() != Status.ACCEPTED) {
			throw new TicketException("Can no accept ticket as it is in status: "+ticket.getStatus());
		}
		ticket.setStatus(Status.CLOSED);
		this.tickets.put(ticket.getId(), ticket);//public void sendUDPPacketToServer(int messageType, Ticket ticket, int optionalTicketId)
		
		TicketRequest request = TicketRequest.newBuilder()
				.setId(ticket.getId())
				.setReporter(ticket.getReporter())
				.setTopic(ticket.getTopic())
				.setDescription(ticket.getDescription())
				.setTypeValue(ticket.getType().ordinal())
				.setPriorityValue(ticket.getPriority().ordinal())
				.setStatusValue(ticket.getStatus().ordinal()).build();
		
		sendPacketToServer(MessageType.UPDATE, request, ticket.getId(), ticket);
		
		return (Ticket) ticket.clone();
	}

}
